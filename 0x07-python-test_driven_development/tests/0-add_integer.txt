Module 0-add_integer

def add_integer(a, b=98) defines the function add_integer,
which add two integers together.
Note: b will hold a value of 98 as default if no value is given to b.

	>>> add_integer = __import__('0-add_integer').add_integer

add_integer will accept integer values

    >>> add_integer(2)
    100

    >>> add_integer(1, 1)
    2

    >>> add_integer(400, 4)
    404

    >>> add_integer(1, 1336)
    1337

add_integer will accept negative integer values

    >>> add_integer(-1, 1)
    0

    >>> add_integer(-30, 20)
    -10

add_integer will accept float values (including negative floats)
note: the indicated typecast is int, so the float will always round down

    >>> add_integer(5.4, 5)
    10

    >>> add_integer(-2.7, 0)
    -2

add_integer will not accept strings

    >>> add_integer(7, "swag")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer("yolo", 7)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

add_integer will not accept no values being passed

    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

add_integer will not accept None
note: In python Null is None

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(4, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

add_integer will not receive three arguments
Note: TypeError will be raised

    >>> add_integer(11, 22, 33)
    Traceback (most recent call last):
        ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
