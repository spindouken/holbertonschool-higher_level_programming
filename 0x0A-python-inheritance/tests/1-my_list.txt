Module 1-my_list

Importing MyList class:

    >>> MyList = __import__('1-my_list').MyList

Usage:

Can be initialized with no args

    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

    >>> print(my_list)
    []

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

TypeError raised if None is as argument:

	>>> my_list = MyList(None)
	Traceback (most recent call last):
	TypeError: 'NoneType' object is not iterable

Can be initialized with a list of integers

	>>> my_list = MyList([3, 2, 1])
	>>> type(my_list)
	<class '1-my_list.MyList'>

	>>> print(my_list)
	[3, 2, 1]

	>>> my_list = MyList([1, 2, 3])
	>>> my_list.print_sorted()
	[1, 2, 3]

Can be initialized with a list of strings

	>>> my_list = MyList(['yolo', 'swag', 'ya'])
	>>> type(my_list)
	<class '1-my_list.MyList'>

	>>> print(my_list)
	['yolo', 'swag', 'ya']

	>>> my_list = MyList(["yolo", "swag", "ya"])
	>>> my_list.print_sorted()
	['swag', 'ya', 'yolo']

Can be initialized with a list of mixed data types

	>>> my_list = MyList([4, 'yolo', 2, 'swag'])
	>>> type(my_list)
	<class '1-my_list.MyList'>

	>>> print(my_list)
	[4, "yolo", 2, "swag"]

	>>> my_list = MyList([4, 'yolo', 2, 'swag'])
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: '<' not supported between instances of 'str' and 'int'

Can deal with list of duplicates

	>>> my_list = MyList([3, 2, 1, 2, 3, 1])
	>>> type(my_list)
	<class '1-my_list.MyList'>

	>>> print(my_list)
	[3, 2, 1, 2, 3, 1]

	>>> my_list = MyList([3, 2, 1, 2, 3, 1])
	>>> my_list.print_sorted()
	[1, 1, 2, 2, 3, 3]
